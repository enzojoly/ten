Build profile: -w ghc-9.8.2 -O1
In order, the following will be built (use -v for more details):
 - mmap-0.5.9 (lib:mmap) (requires download & build)
 - ten-0.1.0.0 (lib) (configuration changed)
 - ten-0.1.0.0 (exe:ten-daemon) (first run)
 - ten-0.1.0.0 (exe:ten) (first run)
Downloading  mmap-0.5.9
Downloaded   mmap-0.5.9
Starting     mmap-0.5.9 (all, legacy fallback: cabal-version is less than 1.8)
Building     mmap-0.5.9 (all, legacy fallback: cabal-version is less than 1.8)
Installing   mmap-0.5.9 (all, legacy fallback: cabal-version is less than 1.8)
Completed    mmap-0.5.9 (all, legacy fallback: cabal-version is less than 1.8)
Configuring library for ten-0.1.0.0...
Preprocessing library for ten-0.1.0.0...
Building library for ten-0.1.0.0...
[ 3 of 21] Compiling Ten.DB.References ( src/Ten/DB/References.hs, /home/enzo/ten/dist-newstyle/build/x86_64-linux/ghc-9.8.2/ten-0.1.0.0/build/Ten/DB/References.o, /home/enzo/ten/dist-newstyle/build/x86_64-linux/ghc-9.8.2/ten-0.1.0.0/build/Ten/DB/References.dyn_o )

src/Ten/DB/References.hs:157:28: error: [GHC-83865]
    • Couldn't match expected type ‘()’ with actual type ‘[a0]’
    • In the first argument of ‘return’, namely ‘[]’
      In the second argument of ‘($)’, namely ‘return []’
      In a stmt of a 'do' block: unless exists $ return []
    |
157 |     unless exists $ return []
    |                            ^^

src/Ten/DB/References.hs:240:31: error: [GHC-83865]
    • Couldn't match expected type ‘Char’
                  with actual type ‘GHC.Word.Word8’
    • In the first argument of ‘isAscii’, namely ‘c’
      In the first argument of ‘(&&)’, namely ‘isAscii c’
      In the expression:
        isAscii c && (isPrint c || c == '\t' || c == '\n')
    |
240 |         BS.all (\c -> isAscii c && (isPrint c || c == '\t' || c == '\n')) bs
    |                               ^

src/Ten/DB/References.hs:240:45: error: [GHC-83865]
    • Couldn't match expected type ‘Char’
                  with actual type ‘GHC.Word.Word8’
    • In the first argument of ‘isPrint’, namely ‘c’
      In the first argument of ‘(||)’, namely ‘isPrint c’
      In the second argument of ‘(&&)’, namely
        ‘(isPrint c || c == '\t' || c == '\n')’
    |
240 |         BS.all (\c -> isAscii c && (isPrint c || c == '\t' || c == '\n')) bs
    |                                             ^

src/Ten/DB/References.hs:240:55: error: [GHC-83865]
    • Couldn't match expected type ‘GHC.Word.Word8’
                  with actual type ‘Char’
    • In the second argument of ‘(==)’, namely ‘'\t'’
      In the first argument of ‘(||)’, namely ‘c == '\t'’
      In the second argument of ‘(||)’, namely ‘c == '\t' || c == '\n'’
    |
240 |         BS.all (\c -> isAscii c && (isPrint c || c == '\t' || c == '\n')) bs
    |                                                       ^^^^

src/Ten/DB/References.hs:240:68: error: [GHC-83865]
    • Couldn't match expected type ‘GHC.Word.Word8’
                  with actual type ‘Char’
    • In the second argument of ‘(==)’, namely ‘'\n'’
      In the second argument of ‘(||)’, namely ‘c == '\n'’
      In the second argument of ‘(||)’, namely ‘c == '\t' || c == '\n'’
    |
240 |         BS.all (\c -> isAscii c && (isPrint c || c == '\t' || c == '\n')) bs
    |                                                                    ^^^^

src/Ten/DB/References.hs:384:31: error: [GHC-83865]
    • Couldn't match expected type ‘Char’
                  with actual type ‘GHC.Word.Word8’
    • In the first argument of ‘isAscii’, namely ‘c’
      In the first argument of ‘(&&)’, namely ‘isAscii c’
      In the expression:
        isAscii c && (isPrint c || c == '\t' || c == '\n')
    |
384 |         BS.all (\c -> isAscii c && (isPrint c || c == '\t' || c == '\n')) bs &&
    |                               ^

src/Ten/DB/References.hs:384:45: error: [GHC-83865]
    • Couldn't match expected type ‘Char’
                  with actual type ‘GHC.Word.Word8’
    • In the first argument of ‘isPrint’, namely ‘c’
      In the first argument of ‘(||)’, namely ‘isPrint c’
      In the second argument of ‘(&&)’, namely
        ‘(isPrint c || c == '\t' || c == '\n')’
    |
384 |         BS.all (\c -> isAscii c && (isPrint c || c == '\t' || c == '\n')) bs &&
    |                                             ^

src/Ten/DB/References.hs:384:55: error: [GHC-83865]
    • Couldn't match expected type ‘GHC.Word.Word8’
                  with actual type ‘Char’
    • In the second argument of ‘(==)’, namely ‘'\t'’
      In the first argument of ‘(||)’, namely ‘c == '\t'’
      In the second argument of ‘(||)’, namely ‘c == '\t' || c == '\n'’
    |
384 |         BS.all (\c -> isAscii c && (isPrint c || c == '\t' || c == '\n')) bs &&
    |                                                       ^^^^

src/Ten/DB/References.hs:384:68: error: [GHC-83865]
    • Couldn't match expected type ‘GHC.Word.Word8’
                  with actual type ‘Char’
    • In the second argument of ‘(==)’, namely ‘'\n'’
      In the second argument of ‘(||)’, namely ‘c == '\n'’
      In the second argument of ‘(||)’, namely ‘c == '\t' || c == '\n'’
    |
384 |         BS.all (\c -> isAscii c && (isPrint c || c == '\t' || c == '\n')) bs &&
    |                                                                    ^^^^
[ 4 of 21] Compiling Ten.DB.Schema    ( src/Ten/DB/Schema.hs, /home/enzo/ten/dist-newstyle/build/x86_64-linux/ghc-9.8.2/ten-0.1.0.0/build/Ten/DB/Schema.o, /home/enzo/ten/dist-newstyle/build/x86_64-linux/ghc-9.8.2/ten-0.1.0.0/build/Ten/DB/Schema.dyn_o )

src/Ten/DB/Schema.hs:226:80: error: [GHC-83865]
    • Couldn't match expected type ‘Query’ with actual type ‘Text’
    • In the first argument of ‘(<>)’, namely ‘tableName’
      In the second argument of ‘(<>)’, namely ‘tableName <> ")"’
      In the second argument of ‘query’, namely
        ‘("PRAGMA table_info(" <> tableName <> ")")’
    |
226 |             results <- try $ query (DBCore.dbConn db) ("PRAGMA table_info(" <> tableName <> ")") ()
    |                                                                                ^^^^^^^^^

src/Ten/DB/Schema.hs:266:76: error: [GHC-83865]
    • Couldn't match expected type ‘Query’ with actual type ‘Text’
    • In the first argument of ‘(<>)’, namely ‘tableName’
      In the second argument of ‘(<>)’, namely ‘tableName <> ")"’
      In the second argument of ‘query’, namely
        ‘("PRAGMA table_info(" <> tableName <> ")")’
    |
266 |         columns <- try $ query (DBCore.dbConn db) ("PRAGMA table_info(" <> tableName <> ")") ()
    |                                                                            ^^^^^^^^^
[ 9 of 21] Compiling Ten.Sandbox      ( src/Ten/Sandbox.hs, /home/enzo/ten/dist-newstyle/build/x86_64-linux/ghc-9.8.2/ten-0.1.0.0/build/Ten/Sandbox.o, /home/enzo/ten/dist-newstyle/build/x86_64-linux/ghc-9.8.2/ten-0.1.0.0/build/Ten/Sandbox.dyn_o ) [Source file changed]

src/Ten/Sandbox.hs:480:34: error: [GHC-10969]
    • Pattern synonym ‘User.UserEntry’ used as a type
    • In the first argument of ‘IO’, namely ‘User.UserEntry’
      In the type signature:
        safeGetUserEntry :: String -> IO User.UserEntry
    |
480 | safeGetUserEntry :: String -> IO User.UserEntry
    |                                  ^^^^^^^^^^^^^^

src/Ten/Sandbox.hs:493:35: error: [GHC-10969]
    • Pattern synonym ‘User.GroupEntry’ used as a type
    • In the first argument of ‘IO’, namely ‘User.GroupEntry’
      In the type signature:
        safeGetGroupEntry :: String -> IO User.GroupEntry
    |
493 | safeGetGroupEntry :: String -> IO User.GroupEntry
    |                                   ^^^^^^^^^^^^^^^
Error: [Cabal-7125]
Failed to build ten-0.1.0.0 (which is required by exe:ten-daemon from ten-0.1.0.0 and exe:ten from ten-0.1.0.0).

